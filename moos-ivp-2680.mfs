//====================================================================
module   = lib_henrik_anneal
type     = Library
author   = Henrik Schmidt
contact  = henrik@mit.edu
org      = MIT

thumb = A library with annealer and thermal front sim, for 2.680 Front
  Estimation lab

depends  = 

borndate = 120301
doc_url  = http://oceanai.mit.edu/ivpman/labs/front_estimate
license  = GPL
//group    = MOOS-IvP, Libraries, 2.680, Simulation
group    = 2.680
distro   = moos-ivp.org

synopsis = The front estimation lab utilizes a simulated moving thermal
  front. The simulator is implemented in this library to support both the
  actual simulator MOOS app (uFldCTDSensor) and the MOOS app generating
  information for rendering during simulation (uFrontGridRender). This
  library also provides a strawman MOOS app for estimating the thermal
  front parameters using a simulated annealer. The annealer is contained
  in this library to support both the strawman app (pFrontEstimate), and
  any student written app written during the lab.

//====================================================================
module   = lib_ufld_hazards
type     = Library
author   = Michael Benjamin
contact  = mikerb@mit.edu, issues@mit.edu
org      = MIT
thumb    = A library containing key data structures for the 2.680 Hazard Search Lab

depends  = 

borndate = 120112
doc_url  = http://oceanai.mit.edu/ivpman/apps/uFldHazardSensor
license  = GPL
//group    = MOOS-IvP, Libraries, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The lib_ufld_hazards library contains key classes used by the
  handful of applications used in the Hazard Search lab of MIT 2.680. It
  holds the class definition of a Hazard object as well as methods for
  serialization and de-serialization. 

//====================================================================
module   = gen_hazards
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = A utility for generating a hazard file
depends  = lib_mbutil, lib_ufld_hazards, geometry
borndate = 120127
doc_url  = Pending
license  = GPL
group    = 2.680
distro   = moos-ivp.org

synopsis = gen_hazards is a utility for generating a hazard file,
  i.e., a simulated threat laydown. Objects will be generated within a
  given convex polygon. Generated objects are either hazards or benign
  objects. Benign objects may have a resemblance factor associated
  with them. This represents how similar a benign object may appear to
  a hazardous object. Objects may also have an optimal sensing aspect
  specified.  This represents the best approach angle for a vehicle to
  optimize its sensor performance. If the optimal aspect is specified,
  a sensitivity factor is also given, ssigma.


//====================================================================
module   = pFrontEstimate
type     = MOOS App
author   = Henrik Schmidt
contact  = henrik@mit.edu
org      = MIT
thumb    = Evualation of a simulated thermal front
depends  = lib_mbutil, lib_henrik_anneal, lib_MOOS
borndate = 120315
doc_url  = Pending
license  = GPL
//group    = MOOS-IvP, Simulation, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The pFrontEstimate app is a baseline implementation of an
  app to be written as part of the 2.680 Front Estimation lab. Those
  doing this lab will typically start with this app and improve it.

//====================================================================
module   = pFrontGridRender
type     = MOOS App
author   = Michael Benjamin, Henrik Schmidt
contact  = mikerb@mit.edu
org      = MIT
thumb    = Renders a simulated moving thermal front
depends  = lib_mbutil, lib_geometry, lib_henrik_anneal, lib_MOOS
borndate = 130413
doc_url  = Pending
license  = GPL
//group    = MOOS-IvP, Simulation, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The pFrontGridRender is typically used in the Front Estimation
  lab of MIT 2.680, to render the thermal front currently being simulated.
  This app typically runs on the shoreside computer during the in-water
  lab. The simulation of the front itself is typically done in uSimCTDSensor,
  which posts the present temperature values associated with a x-y
  coordinates. pFrontGridRender maintains a grid structure, and posts
  viewable objects to be consumed by pMarineViewer for rendering.

//====================================================================
module   = pGradeFrontEstimate
type     = MOOS App
author   = Henrik Schmidt, Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Run-time evaluation of an estimate of simulated thermal front
depends  = lib_mbutil, lib_geometry, lib_henrik_anneal, lib_MOOS
borndate = 120301
doc_url  = Pending
license  = GPL
//group    = MOOS-IvP, Simulation, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The pGradeFrontEstimate application is part of 2.680 Front
  Estimation lab. It typically runs on the shoreside computer and
  receives incoming estimates of the wave front, sent by vehicle
  exploring the operation area. It has access to the ground truth,
  actaual wave front parameters, used by uSimCTDSensor. These
  parameters come via the UCTD_TRUE_PARAMETERS published by
  uSimCTDSensor.

//====================================================================
module   = uFldCTDSensor
type     = MOOS App
author   = Henrik Schmidt, Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Simulates a CTD Sensor and simulated thermal front
depends  = lib_mbutil, lib_apputil, lib_geometry, lib_henrik_anneal, lib_MOOS
borndate = 120128
doc_url  = Pending
license  = GPL
//group    = MOOS-IvP, Simulation, uField ToolBox, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The uFldCTDSensor was originally written to the support the
  MIT 2.680 Front Estimation lab. It is typically run in a shoreside
  community. Simulates a CTD sensor on a vehicle. Currently only
  provides temperature.  Configured for a specific temepraturte field,
  currently a propagating ocean front.

//====================================================================
module   = uFldHazardMetric
type     = MOOS App
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Receives and grades effectiveness of hazard field reports
depends  = lib_mbutil, lib_apputil, lib_geometry, lib_ufld_hazards, lib_MOOS
borndate = 120312
doc_url  = http://oceanai.mit.edu/ivpman/apps/uFldHazardMetric
license  = GPL
//group    = MOOS-IvP, Simulation, uField ToolBox, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = A utility for quickly evaluating a hazardset report; a list
  of declared hazards and their locations.  Evaluating a hazardset
  report against ground truth and a reward structure is fairly
  straight-forward, but tedious. This tool performs this operation
  automatically, and as a MOOS process with the result posted both to
  the MOOSDB and viewable in the appcast output of
  uFldHazardMetric.  Operation is comprised of a few simple parts:

(1) Import a ground-truth hazard field: A ground truth hazard
  field is a text file listing the location of hazards and hazard-like
  objects, and their locations. This file also typically includes a
  search region, a convex polygon containing all listed objects.  A
  uFldHazardMetric configuration parameter names the file.

(2) Import a reward structure: A reward structure, consisting of
  penalties for missed hazards and false alarms, is imported as a set
  of uFldHazardMetric configuration parameter.

(3) Evaluate a hazardset report: A hazardset report is received by
  MOOS mail and evaluated item by item against the ground truth and
  reward structure. The results are then posted and rendered. This
  step is repeated for each received report.

//====================================================================
module   = uFldHazardMgr
type     = MOOS App
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Strawman MOOS app for managing hazard sensor information
depends  = lib_mbutil, lib_apputil, lib_geometry, lib_ufld_hazards, lib_MOOS
borndate = 121026
doc_url  = http://oceanai.mit.edu/ivpman/apps/uFldHazardMgr
license  = GPL
//group    = MOOS-IvP, Simulation, uField ToolBox, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The uFldHazardMgr is a strawman MOOS app for managing hazard  
  sensor information and generation of a hazard report over the 
  course of an autonomous search mission. In the 2.680 Hazard Search lab,
  this module is regarded as a baseline solution to be replaced by a
  more sophisticated solution by those doing the lab. 

//====================================================================
module   = uFldHazardSensor
type     = MOOS App
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Simultated (e.g. side scan) sensor for detecting underwater objects
depends  = lib_mbutil, lib_apputil, lib_geometry, lib_ufld_hazards, lib_MOOS
borndate = 120128
doc_url  = http://oceanai.mit.edu/ivpman/apps/uFldHazardSensor
license  = GPL
//group    = MOOS-IvP, Simulation, uField ToolBox, 2.680
group    = 2.680
distro   = moos-ivp.org

synopsis = The uFldHazardSensor MOOS app simulates a sensor for
  detecting underwater objects. It is typically run in a shoreside
  community. Configured with a set objects (i.e., "threat laydown" if
  the objects of interest are mines) with a given x,y location and
  classification (hazard or benign). The sensor simulator receives a
  series of requests from a remote vehicle. When sensor determines
  that an object is within the sensor field of a requesting
  vehicle, it may or may not return a sensor detection report for the
  object, and perhaps also a proper classification. The odds of
  receiving a detection and proper classification depend on the sensor
  configuration and the user's preference for P_D/P_FA on the
  prevailing ROC curve.
  
